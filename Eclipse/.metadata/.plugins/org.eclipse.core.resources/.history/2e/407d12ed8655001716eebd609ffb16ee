/**
 * @author UCSD MOOC development team and YOU
 * 
 * A class which reprsents a graph of geographic locations
 * Nodes in the graph are intersections between 
 *
 */
package roadgraph;


import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.function.Consumer;

import basicgraph.Graph;
import basicgraph.GraphAdjList;
import geography.GeographicPoint;
import util.GraphLoader;

/**
 * @author UCSD MOOC development team and YOU
 * 
 * A class which represents a graph of geographic locations
 * Nodes in the graph are intersections between 
 *
 */
public class MapGraph {
	//TODO: Add your member variables here in WEEK 3
	private MapGraphAdjList mgaj; //map adjacency graph list
	private HashMap<GeographicPoint, Integer> GPS; //A map for Geographic points of the graph to their indices inside the adjacency list
	private List<GeographicPoint> GPL; // List of Geographic points (Vertices) of the graph where the index of the Geographic point is its vertex
	
	/** 
	 * Create a new empty MapGraph 
	 */
	public MapGraph()
	{
		// TODO: Implement in this constructor in WEEK 3
		mgaj = new MapGraphAdjList();
		GPS = new HashMap<>();
		GPL = new ArrayList<>();
	}
	
	/**
	 * Get the number of vertices (road intersections) in the graph
	 * @return The number of vertices in the graph.
	 */
	public int getNumVertices()
	{
		//TODO: Implement this method in WEEK 3
		return mgaj.getNumVertices();
	}
	
	/**
	 * Return the intersections, which are the vertices in this graph.
	 * @return The vertices in this graph as GeographicPoints
	 */
	public Set<GeographicPoint> getVertices()
	{
		//TODO: Implement this method in WEEK 3
		
		return GPS.keySet();
	}
	
	/**
	 * Get the number of road segments in the graph
	 * @return The number of edges in the graph.
	 */
	public int getNumEdges()
	{
		//TODO: Implement this method in WEEK 3
		return mgaj.getNumEdges();
	}
	
	
	/** Add a node corresponding to an intersection at a Geographic Point
	 * If the location is already in the graph or null, this method does 
	 * not change the graph.
	 * @param location  The location of the intersection
	 * @return true if a node was added, false if it was not (the node
	 * was already in the graph, or the parameter is null).
	 */
	public boolean addVertex(GeographicPoint location)
	{
		// TODO: Implement this method in WEEK 3
		if(location == null || GPS.containsKey(location))
			return false;
		
		GPS.put(location,GPS.size());
		GPL.add(location);
		mgaj.addVertex();
		
		return true;
	}
	
	/**
	 * Adds a directed edge to the graph from pt1 to pt2.  
	 * Precondition: Both GeographicPoints have already been added to the graph
	 * @param from The starting point of the edge
	 * @param to The ending point of the edge
	 * @param roadName The name of the road
	 * @param roadType The type of the road
	 * @param length The length of the road, in km
	 * @throws IllegalArgumentException If the points have not already been
	 *   added as nodes to the graph, if any of the arguments is null,
	 *   or if the length is less than 0.
	 */
	public void addEdge(GeographicPoint from, GeographicPoint to, String roadName,
			String roadType, double length) throws IllegalArgumentException {

		//TODO: Implement this method in WEEK 3
		if(roadName == null)
			throw new IllegalArgumentException("roadName: null");
		
		if(roadType == null)
			throw new IllegalArgumentException("roadType: null");
		
		if(length < 0)
			throw new IllegalArgumentException("length: "+length);
		
		Integer f = GPS.get(from); // index in  adjacency list (if it exists)
		Integer t = GPS.get(to); // index in adjacency list (if it exists)
		
		if(f == null || to == null)
			throw new IllegalArgumentException("from: "+from.toString() + "    to: "+to.toString());
		
		mgaj.addEdge(f, t, roadName + ", " + roadType, length);
	}
	

	/** Find the path from start to goal using breadth first search
	 * 
	 * @param start The starting location
	 * @param goal The goal location
	 * @return The list of intersections that form the shortest (unweighted)
	 *   path from start to goal (including both start and goal).
	 */
	public List<GeographicPoint> bfs(GeographicPoint start, GeographicPoint goal) {
		// Dummy variable for calling the search algorithms
        Consumer<GeographicPoint> temp = (x) -> {};
        return bfs(start, goal, temp);
	}
	
	/** Find the path from start to goal using breadth first search
	 * 
	 * @param start The starting location
	 * @param goal The goal location
	 * @param nodeSearched A hook for visualization.  See assignment instructions for how to use it.
	 * @return The list of intersections that form the shortest (unweighted)
	 *   path from start to goal (including both start and goal).
	 */
	public List<GeographicPoint> bfs(GeographicPoint start, 
			 					     GeographicPoint goal, Consumer<GeographicPoint> nodeSearched)
	{
		// TODO: Implement this method in WEEK 3
		
		List<GeographicPoint> path = null; // the path from start to goal
		
		// Hook for visualization.  See writeup.
		GeographicPoint next = start;
		ArrayDeque<Integer> r = new ArrayDeque<>(mgaj.getNumVertices() >> 1);
        boolean[] v = new boolean[mgaj.getNumVertices()]; // boolean array to check if a vertex was visited before 
        int[] b = new int[mgaj.getNumVertices()]; // an array where each index(vertex) has the value of the previous vertex
        
        Integer s = GPS.get(start); // index in  adjacency list (if it exists)
		Integer t = GPS.get(goal); // index in adjacency list (if it exists)
		nodeSearched.accept(start); 
		
        r.add(s);
        v[s] = true;
        b[s] = -1;
        
        while (!r.isEmpty()) 
        {
            int e = r.remove();

            for (int V : mgaj.getNeighbors(e)) 
            {
            	
            	nodeSearched.accept(GPL.get(V));
            	
                if (!v[V]) 
                {
                    r.add(V);
                    b[V] = e;
                    v[V] = true;
                    if(V == t)
                    {
                    	path = new LinkedList<>();
                        ((LinkedList<GeographicPoint>) path).addFirst(goal);
                        ((LinkedList<GeographicPoint>) path).addFirst(GPL.get(e));
                        e = b[e];
                        while(e != -1)
                        {
                        	((LinkedList<GeographicPoint>) path).addFirst(GPL.get(e));
                        	e = b[e];
                        }
                    }
                } 
            }
        }
	
		return path;
	}
	

	/** Find the path from start to goal using Dijkstra's algorithm
	 * 
	 * @param start The starting location
	 * @param goal The goal location
	 * @return The list of intersections that form the shortest path from 
	 *   start to goal (including both start and goal).
	 */
	public List<GeographicPoint> dijkstra(GeographicPoint start, GeographicPoint goal) {
		// Dummy variable for calling the search algorithms
		// You do not need to change this method.
        Consumer<GeographicPoint> temp = (x) -> {};
        return dijkstra(start, goal, temp);
	}
	
	/** Find the path from start to goal using Dijkstra's algorithm
	 * 
	 * @param start The starting location
	 * @param goal The goal location
	 * @param nodeSearched A hook for visualization.  See assignment instructions for how to use it.
	 * @return The list of intersections that form the shortest path from 
	 *   start to goal (including both start and goal).
	 */
	public List<GeographicPoint> dijkstra(GeographicPoint start, 
										  GeographicPoint goal, Consumer<GeographicPoint> nodeSearched)
	{
		// TODO: Implement this method in WEEK 4

		// Hook for visualization.  See writeup.
		//nodeSearched.accept(next.getLocation());
		
		return null;
	}

	/** Find the path from start to goal using A-Star search
	 * 
	 * @param start The starting location
	 * @param goal The goal location
	 * @return The list of intersections that form the shortest path from 
	 *   start to goal (including both start and goal).
	 */
	public List<GeographicPoint> aStarSearch(GeographicPoint start, GeographicPoint goal) {
		// Dummy variable for calling the search algorithms
        Consumer<GeographicPoint> temp = (x) -> {};
        return aStarSearch(start, goal, temp);
	}
	
	/** Find the path from start to goal using A-Star search
	 * 
	 * @param start The starting location
	 * @param goal The goal location
	 * @param nodeSearched A hook for visualization.  See assignment instructions for how to use it.
	 * @return The list of intersections that form the shortest path from 
	 *   start to goal (including both start and goal).
	 */
	public List<GeographicPoint> aStarSearch(GeographicPoint start, 
											 GeographicPoint goal, Consumer<GeographicPoint> nodeSearched)
	{
		// TODO: Implement this method in WEEK 4
		
		// Hook for visualization.  See writeup.
		//nodeSearched.accept(next.getLocation());
		
		return null;
	}
	
	/** Inserts a new node in the mini heap (or modifies it if it is inside the heap) and modifies 
	 * the heap accordingly for shortest distance calculation 
	 * 
	 * @param rds the array heap used
	 * @param dst an array that maps each vertex (by index position) to its position in the heap 
	 * (the size of the heap if it is not inserted and 0 if removed from the heap)
	 * @param vertex the vertex (integer) of the node 
	 */
	
	public void InsertOrModify(List<Ride_Distance> rds, int dst[], int vertex)
    {
        int pos = dst[vertex];
        Ride_Distance rd = rds.get(pos);
	    while(pos>1 && (rds.get(pos/2)).distance > rd.distance)
        {
		   rds.set(pos, rds.get(pos/2));
           dst[rds.get(pos).vertex] = pos;
		   pos = pos/2;
	    }
	    
	    rds.set(pos, rd);
        dst[vertex] = pos;
    }
	
	/** removes the node with the shortest distance (at index 1) form the mini heap and modifies the heap accordingly
	 * 
	 * @param rds the array heap used
	 * @param dst an array that maps each vertex (by index position) to its position in the heap 
	 * (the size of the heap if it is not inserted and 0 if removed from the heap)
	 * @return the node with minimum distance to destination (after being removed) form the heap
	 */
	public Ride_Distance extractMin(List<Ride_Distance> rds, int[] dst)
    {
		Ride_Distance min = rds.get(1);
        dst[rds.get(1).vertex] = 0;
        int position = rds.size()-1;
        int k = 1, smallest = 2;

		while(smallest < position)
        {
        	if(smallest+1 < position && rds.get(smallest).distance > rds.get(smallest+1).distance)
            {
        		smallest++;
            }
        	
        	if(rds.get(position).distance > rds.get(smallest).distance)
            {
                 rds.set(k, rds.get(smallest));
                 dst[rds.get(k).vertex] = k;
                 k = smallest;
                 smallest *=2;
            }
               else
                   break;
        }
        
            if(position > 1)
            {
            	rds.set(k, rds.get(position));
            	dst[rds.get(k).vertex] = k;
            }
            
            rds.remove(position);
            
	return min;
  }
	
	private double distance(ArrayList<ArrayList<Integer>> adj, ArrayList<ArrayList<Double>> distance, int s, int t) 
	{
		List<Ride_Distance> rds = new ArrayList<>(adj.size()+1);
        rds.add(null);
        int dst[] = new int[adj.size()];
        Arrays.fill(dst, -1);
        dst[s] = 1;
        rds.add(new Ride_Distance(s, 0.0));
        int position = 2;
        
        while (position > 1) 
        {
        	Ride_Distance rd = extractMin(rds, dst);
            position--;
            if(rd.vertex == t)
                return rd.distance;
                       
            for (int V = 0; V < adj.get(rd.vertex).size(); V++) 
            {
                double pd = rd.distance+distance.get(rd.vertex).get(V);
                
                int avr = adj.get(rd.vertex).get(V);
                
                if (dst[avr] > 0 && rds.get(dst[avr]).distance > pd) 
                {
                	rds.get(dst[avr]).distance = pd;
                	InsertOrModify(rds, dst, avr);
                } 
                else if(dst[adj.get(rd.vertex).get(V)] == -1)
                {
                	dst[avr] = rds.size();
                	rds.add(new Ride_Distance(avr, pd));
                	InsertOrModify(rds, dst, avr);
                    position++;
                }
            }
        }
        
        return -1;
    }

	
	
	public static void main(String[] args)
	{
		System.out.print("Making a new map...");
		MapGraph firstMap = new MapGraph();
		System.out.print("DONE. \nLoading the map...");
		GraphLoader.loadRoadMap("data/testdata/simpletest.map", firstMap);
		System.out.println("DONE.");
		
		// You can use this method for testing.  
		
		
		/* Here are some test cases you should try before you attempt 
		 * the Week 3 End of Week Quiz, EVEN IF you score 100% on the 
		 * programming assignment.
		 */
		/*
		MapGraph simpleTestMap = new MapGraph();
		GraphLoader.loadRoadMap("data/testdata/simpletest.map", simpleTestMap);
		
		GeographicPoint testStart = new GeographicPoint(1.0, 1.0);
		GeographicPoint testEnd = new GeographicPoint(8.0, -1.0);
		
		System.out.println("Test 1 using simpletest: Dijkstra should be 9 and AStar should be 5");
		List<GeographicPoint> testroute = simpleTestMap.dijkstra(testStart,testEnd);
		List<GeographicPoint> testroute2 = simpleTestMap.aStarSearch(testStart,testEnd);
		
		
		MapGraph testMap = new MapGraph();
		GraphLoader.loadRoadMap("data/maps/utc.map", testMap);
		
		// A very simple test using real data
		testStart = new GeographicPoint(32.869423, -117.220917);
		testEnd = new GeographicPoint(32.869255, -117.216927);
		System.out.println("Test 2 using utc: Dijkstra should be 13 and AStar should be 5");
		testroute = testMap.dijkstra(testStart,testEnd);
		testroute2 = testMap.aStarSearch(testStart,testEnd);
		
		
		// A slightly more complex test using real data
		testStart = new GeographicPoint(32.8674388, -117.2190213);
		testEnd = new GeographicPoint(32.8697828, -117.2244506);
		System.out.println("Test 3 using utc: Dijkstra should be 37 and AStar should be 10");
		testroute = testMap.dijkstra(testStart,testEnd);
		testroute2 = testMap.aStarSearch(testStart,testEnd);
		*/
		
		
		/* Use this code in Week 3 End of Week Quiz */
		/*MapGraph theMap = new MapGraph();
		System.out.print("DONE. \nLoading the map...");
		GraphLoader.loadRoadMap("data/maps/utc.map", theMap);
		System.out.println("DONE.");

		GeographicPoint start = new GeographicPoint(32.8648772, -117.2254046);
		GeographicPoint end = new GeographicPoint(32.8660691, -117.217393);
		
		
		List<GeographicPoint> route = theMap.dijkstra(start,end);
		List<GeographicPoint> route2 = theMap.aStarSearch(start,end);

		*/
		
	}
	
}
