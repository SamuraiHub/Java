/*
 * DesktopApplication1View.java
 */
package desktopapplication1;

import javax.swing.JOptionPane;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import java.io.File;
import java.io.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
/**
 * The application's main frame.
 */
public class DesktopApplication1View extends FrameView  {
    protected static boolean q;
    protected File[] files;
    public DesktopApplication1View(SingleFrameApplication app) {
        super(app);
        q = false;
       
        initComponents();
          
        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {

            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String) (evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer) (evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = DesktopApplication1.getApplication().getMainFrame();
            aboutBox = new DesktopApplication1AboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        DesktopApplication1.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        butConnect = new javax.swing.JButton();
        lblOut = new java.awt.TextArea();
        txtUsername = new javax.swing.JTextField();
        butStatus = new javax.swing.JButton();
        butAddfiles = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        butSearch = new javax.swing.JButton();
        butClearFiles = new javax.swing.JButton();
        butQuit = new javax.swing.JButton();
        txtHostAddress = new javax.swing.JTextField();
        HostAddress = new javax.swing.JLabel();
        UserName = new javax.swing.JLabel();
        txtPortNumber = new javax.swing.JTextField();
        PortNumber = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(desktopapplication1.DesktopApplication1.class).getContext().getActionMap(DesktopApplication1View.class, this);
        butConnect.setAction(actionMap.get("ConnectToServer")); // NOI18N
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(desktopapplication1.DesktopApplication1.class).getContext().getResourceMap(DesktopApplication1View.class);
        butConnect.setText(resourceMap.getString("butConnect.text")); // NOI18N
        butConnect.setName("butConnect"); // NOI18N

        lblOut.setName("lblOut"); // NOI18N

        txtUsername.setText(resourceMap.getString("txtUsername.text")); // NOI18N
        txtUsername.setName("txtUsername"); // NOI18N
        txtUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsernameActionPerformed(evt);
            }
        });

        butStatus.setAction(actionMap.get("GetStatus")); // NOI18N
        butStatus.setText(resourceMap.getString("butStatus.text")); // NOI18N
        butStatus.setName("butStatus"); // NOI18N

        butAddfiles.setAction(actionMap.get("AddFiles")); // NOI18N
        butAddfiles.setName("butAddfiles"); // NOI18N

        txtSearch.setName("txtSearch"); // NOI18N

        butSearch.setAction(actionMap.get("Search")); // NOI18N
        butSearch.setText(resourceMap.getString("butSearch.text")); // NOI18N
        butSearch.setName("butSearch"); // NOI18N

        butClearFiles.setAction(actionMap.get("ClearFiles")); // NOI18N
        butClearFiles.setName("butClearFiles"); // NOI18N

        butQuit.setAction(actionMap.get("Quit")); // NOI18N
        butQuit.setText(resourceMap.getString("butQuit.text")); // NOI18N
        butQuit.setName("butQuit"); // NOI18N
        butQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butQuitActionPerformed(evt);
            }
        });

        txtHostAddress.setText(resourceMap.getString("txtHostAddress.text")); // NOI18N
        txtHostAddress.setName("txtHostAddress"); // NOI18N
        txtHostAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHostAddressActionPerformed(evt);
            }
        });

        HostAddress.setText(resourceMap.getString("HostAddress.text")); // NOI18N
        HostAddress.setName("HostAddress"); // NOI18N

        UserName.setText(resourceMap.getString("UserName.text")); // NOI18N
        UserName.setName("UserName"); // NOI18N

        txtPortNumber.setText(resourceMap.getString("txtPortNumber.text")); // NOI18N
        txtPortNumber.setName("txtPortNumber"); // NOI18N

        PortNumber.setText(resourceMap.getString("PortNumber.text")); // NOI18N
        PortNumber.setName("PortNumber"); // NOI18N

        org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(HostAddress)
                            .add(mainPanelLayout.createSequentialGroup()
                                .add(38, 38, 38)
                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(UserName)
                                    .add(PortNumber))))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(txtSearch)
                            .add(butConnect, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, txtPortNumber)
                            .add(txtUsername)
                            .add(txtHostAddress, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, butAddfiles, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(butStatus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 116, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(36, 36, 36)
                        .add(butClearFiles, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 98, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(butQuit, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(butSearch, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE))
                .addContainerGap(30, Short.MAX_VALUE))
            .add(lblOut, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(HostAddress)
                    .add(txtHostAddress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(txtPortNumber, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(PortNumber))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(txtUsername, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(UserName))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(butConnect)
                .add(18, 18, 18)
                .add(butAddfiles)
                .add(18, 18, 18)
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(butSearch)
                    .add(txtSearch, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(butStatus)
                    .add(butClearFiles)
                    .add(butQuit))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lblOut, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 299, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        org.jdesktop.layout.GroupLayout statusPanelLayout = new org.jdesktop.layout.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(statusMessageLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 268, Short.MAX_VALUE)
                .add(statusAnimationLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .add(statusPanelSeparator, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, statusPanelLayout.createSequentialGroup()
                .add(22, 22, 22)
                .add(statusPanelSeparator, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(statusPanelLayout.createSequentialGroup()
                        .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(statusMessageLabel)
                            .add(statusAnimationLabel))
                        .add(3, 3, 3))
                    .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents
    private void butQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butQuitActionPerformed
}//GEN-LAST:event_butQuitActionPerformed

    private void txtUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUsernameActionPerformed

    private void txtHostAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHostAddressActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_txtHostAddressActionPerformed
    @Action
    public boolean ConnectToServer() {
    
            try {
            
            Helpers.init(lblOut);
              if(q == true)       
            {
          Helpers.InitHandshake(txtUsername.getText());
          return true;
            } 
               if(txtHostAddress.getText().trim().length() == 0)
        {

        return true;
        }
               if(txtPortNumber.getText().trim().length() == 0)
        {

        return true;
        }
                      if(txtUsername.getText().trim().length() == 0)
        {

        return true;
        }    
         
            //connect
             Client.Connect(txtHostAddress.getText(), txtPortNumber.getText()); 
     
            //once connected, start recieving
            Client.Receive();

            
            //get username from user & validate
     
            Helpers.InitHandshake(txtUsername.getText());
           
            //Helpers.SendUsername();
        } catch (java.io.IOException ex) {
    
        }
       return true;
    }

    @Action
    public boolean GetStatus() {
       Helpers.init(lblOut);
        if(!q)
        {    
          
        Helpers.OutputText("Error: not connected to server");
        Client.Out.println("Error: not connected to server");
        return true;
        }
            Helpers.GetStatus();
             return true;
    }

    @Action
    public boolean AddFiles() {
        String s = "";
        Helpers.init(lblOut);
        if(!q)
        {    
          
        Helpers.OutputText("Error: not connected to server");
        Client.Out.println("Error: not connected to server");
        return true;
        }
            if (Addfile == null  ) {
            JFrame mainFrame = DesktopApplication1.getApplication().getMainFrame();
            Addfile = new DesktopApplication1Addfile(); 
            Addfile.setLocationRelativeTo(mainFrame);
        }
        DesktopApplication1.getApplication().show(Addfile);
       
      
        if(DesktopApplication1Addfile.returnVal == DesktopApplication1Addfile.jFileChooser1.APPROVE_OPTION)           
        {
         files = DesktopApplication1Addfile.jFileChooser1.getSelectedFiles(); 
        for(int i = 0; i < files.length; i++)
        {
        
            if(!(files[i].exists()))
        {
        Helpers.OutputText("cannot find file " + files[i].getName());        
          Client.Out.println("cannot find file " + files[i].getName());
        continue;    
        }
            if(i == files.length-1)
        {
        s = s + files[i].getName();
        continue;
        }    
       s = s + files[i].getName() + ",";  
        }
        
        Helpers.AddFiles(s);
        Addfile.setVisible(false);
        Addfile = null;
        }   
        else
        {
          Helpers.OutputText("upload command cancelled by user");        
          Client.Out.println("upload command cancelled by user");
          Addfile.setVisible(false);
          Addfile = null;
        }   
       
        return true;
    }

    @Action
    public boolean Search() {
        Helpers.init(lblOut);
        if(!q)
        {    
          
        Helpers.OutputText("Error: not connected to server");
        Client.Out.println("Error: not connected to server");
        return true;
        }
            Helpers.Search(txtSearch.getText());
        return true;
    }

    @Action
    public boolean  ClearFiles() {
        Helpers.init(lblOut); 
        if(!q)
        {    
          
        Helpers.OutputText("Error: not connected to server");
        Client.Out.println("Error: not connected to server");
        return true;
        }
            Helpers.ClearFiles();
             return true;
    }

    @Action
    public boolean  Quit() {
       Helpers.init(lblOut);
        if(!q)
        {    
          
        Helpers.OutputText("Error: not connected to server");
        Client.Out.println("Error: not connected to server");
        return true;
        }
           
        q = false;    
        Helpers.Quit();     
       
     return true;
    }
   
  
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel HostAddress;
    private javax.swing.JLabel PortNumber;
    private javax.swing.JLabel UserName;
    private javax.swing.JButton butAddfiles;
    private javax.swing.JButton butClearFiles;
    private javax.swing.JButton butConnect;
    private javax.swing.JButton butQuit;
    private javax.swing.JButton butSearch;
    private javax.swing.JButton butStatus;
    private java.awt.TextArea lblOut;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JTextField txtHostAddress;
    private javax.swing.JTextField txtPortNumber;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
    private File[] filz;
    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;
    private JDialog aboutBox;
    private JFrame Addfile;
    private JFrame Download;
    protected  List file;
 
 
}
